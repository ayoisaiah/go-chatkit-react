{"ast":null,"code":"import { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\n\nfunction handleInput(event) {\n  const _event$target = event.target,\n        value = _event$target.value,\n        name = _event$target.name;\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const userId = this.state.userId;\n  const tokenProvider = new TokenProvider({\n    url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/69ed7eee-36b3-4907-9f1e-60c3db70d559/token\"\n  });\n  const chatManager = new ChatManager({\n    instanceLocator: \"v1:us1:69ed7eee-36b3-4907-9f1e-60c3db70d559\",\n    userId,\n    tokenProvider\n  });\n  return chatManager.connect({\n    onRoomUpdated: room => {\n      const rooms = this.state.rooms;\n      const index = rooms.findIndex(r => r.id === room.id);\n      rooms[index] = room;\n      this.setState({\n        rooms\n      });\n    }\n  }).then(currentUser => {\n    this.setState({\n      currentUser\n    }, () => connectToRoom.call(this));\n  }).catch(console.error);\n}\n\nfunction connectToRoom(roomId = \"21431542\") {\n  const currentUser = this.state.currentUser;\n  this.setState({\n    messages: []\n  });\n  return currentUser.subscribeToRoomMultipart({\n    roomId,\n    messageLimit: 10,\n    hooks: {\n      onMessage: message => {\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n        const currentRoom = this.state.currentRoom;\n        if (currentRoom === null) return;\n        return currentUser.setReadCursor({\n          roomId: currentRoom.id,\n          position: message.id\n        });\n      }\n    }\n  }).then(currentRoom => {\n    this.setState({\n      currentRoom,\n      rooms: currentUser.rooms\n    });\n  }).catch(console.error);\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const _this$state = this.state,\n        newMessage = _this$state.newMessage,\n        currentUser = _this$state.currentUser,\n        currentRoom = _this$state.currentRoom;\n  const parts = [];\n  if (newMessage.trim() === \"\") return;\n  parts.push({\n    type: \"text/plain\",\n    content: newMessage\n  });\n  currentUser.sendMultipartMessage({\n    roomId: \"\".concat(currentRoom.id),\n    parts\n  });\n  this.setState({\n    newMessage: \"\"\n  });\n}\n\nexport { handleInput, connectToRoom, connectToChatkit, sendMessage };","map":{"version":3,"sources":["/home/ayo/Dev/pusher/react-unread/src/methods.js"],"names":["ChatManager","TokenProvider","handleInput","event","target","value","name","setState","connectToChatkit","preventDefault","userId","state","tokenProvider","url","chatManager","instanceLocator","connect","onRoomUpdated","room","rooms","index","findIndex","r","id","then","currentUser","connectToRoom","call","catch","console","error","roomId","messages","subscribeToRoomMultipart","messageLimit","hooks","onMessage","message","currentRoom","setReadCursor","position","sendMessage","newMessage","parts","trim","push","type","content","sendMultipartMessage"],"mappings":"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","sourcesContent":["import { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\n\nfunction handleInput(event) {\n  const { value, name } = event.target;\n\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const { userId } = this.state;\n\n  const tokenProvider = new TokenProvider({\n    url:\n      \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/69ed7eee-36b3-4907-9f1e-60c3db70d559/token\"\n  });\n\n  const chatManager = new ChatManager({\n    instanceLocator: \"v1:us1:69ed7eee-36b3-4907-9f1e-60c3db70d559\",\n    userId,\n    tokenProvider\n  });\n\n  return chatManager\n    .connect({\n      onRoomUpdated: room => {\n        const { rooms } = this.state;\n        const index = rooms.findIndex(r => r.id === room.id);\n        rooms[index] = room;\n        this.setState({\n          rooms,\n        });\n      }\n    })\n    .then(currentUser => {\n      this.setState(\n        {\n          currentUser,\n        },\n        () => connectToRoom.call(this)\n      );\n    })\n    .catch(console.error);\n}\n\nfunction connectToRoom(roomId = \"21431542\") {\n  const { currentUser } = this.state;\n  this.setState({\n    messages: []\n  });\n\n  return currentUser\n    .subscribeToRoomMultipart({\n      roomId,\n      messageLimit: 10,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message],\n          });\n\n          const { currentRoom } = this.state;\n\n          if (currentRoom === null) return;\n\n          return currentUser.setReadCursor({\n            roomId: currentRoom.id,\n            position: message.id,\n          });\n        },\n      }\n    })\n    .then(currentRoom => {\n      this.setState({\n        currentRoom,\n        rooms: currentUser.rooms,\n      });\n    })\n    .catch(console.error);\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const { newMessage, currentUser, currentRoom } = this.state;\n  const parts = [];\n\n  if (newMessage.trim() === \"\") return;\n\n  parts.push({\n    type: \"text/plain\",\n    content: newMessage\n  });\n\n  currentUser.sendMultipartMessage({\n    roomId: `${currentRoom.id}`,\n    parts\n  });\n\n  this.setState({\n    newMessage: \"\",\n  });\n}\n\nexport {\n  handleInput,\n  connectToRoom,\n  connectToChatkit,\n  sendMessage,\n}\n"]},"metadata":{},"sourceType":"module"}