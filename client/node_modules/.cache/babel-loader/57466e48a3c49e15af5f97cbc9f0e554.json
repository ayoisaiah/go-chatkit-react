{"ast":null,"code":"import { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\n\nfunction handleInput(event) {\n  const _event$target = event.target,\n        value = _event$target.value,\n        name = _event$target.name;\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const userId = this.state.userId;\n  const tokenProvider = new TokenProvider({\n    url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/69ed7eee-36b3-4907-9f1e-60c3db70d559/token\"\n  });\n  const chatManager = new ChatManager({\n    instanceLocator: \"v1:us1:69ed7eee-36b3-4907-9f1e-60c3db70d559\",\n    userId,\n    tokenProvider\n  });\n  return chatManager.connect({\n    onRoomUpdated: room => {\n      const rooms = this.state.rooms;\n      const index = rooms.findIndex(r => r.id === room.id);\n      rooms[index] = room;\n      this.setState({\n        rooms\n      });\n    }\n  }).then(currentUser => {\n    this.setState({\n      currentUser\n    }, () => connectToRoom.call(this));\n  }).catch(console.error);\n}\n\nfunction connectToRoom(roomId = \"21431174\") {\n  const currentUser = this.state.currentUser;\n  this.setState({\n    messages: []\n  });\n  return currentUser.subscribeToRoomMultipart({\n    roomId,\n    messageLimit: 10,\n    hooks: {\n      onMessage: message => {\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n        const currentRoom = this.state.currentRoom;\n        if (currentRoom === null) return;\n        return currentUser.setReadCursor({\n          roomId: currentRoom.id,\n          position: message.id\n        });\n      }\n    }\n  }).then(currentRoom => {\n    this.setState({\n      currentRoom,\n      rooms: currentUser.rooms\n    });\n  }).catch(console.error);\n}\n\nfunction sendNews(query) {\n  const _this$state = this.state,\n        currentUser = _this$state.currentUser,\n        currentRoom = _this$state.currentRoom;\n  fetch(\"https://newsapi.org/v2/everything?q=\".concat(query, \"&pageSize=3&apiKey=7b5e61f91b1142cd97518974460dcdb2\")).then(res => res.json()).then(data => {\n    const parts = [];\n    data.articles.forEach(article => {\n      parts.push({\n        type: \"text/plain\",\n        content: \"\".concat(article.title, \" - \").concat(article.source.name, \" - \").concat(article.url)\n      });\n    });\n    currentUser.sendMultipartMessage({\n      roomId: \"\".concat(currentRoom.id),\n      parts\n    });\n  }).catch(console.error);\n}\n\nfunction handleSlashCommand(message) {\n  const cmd = message.split(\" \")[0];\n  const txt = message.slice(cmd.length);\n\n  if (cmd !== \"/news\") {\n    alert(\"\".concat(cmd, \" is not a valid command\"));\n    return;\n  }\n\n  return sendNews.call(this, txt);\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const _this$state2 = this.state,\n        newMessage = _this$state2.newMessage,\n        currentUser = _this$state2.currentUser,\n        currentRoom = _this$state2.currentRoom;\n  const parts = [];\n  if (newMessage.trim() === \"\") return;\n\n  if (newMessage.startsWith(\"/\")) {\n    handleSlashCommand.call(this, newMessage);\n    this.setState({\n      newMessage: \"\"\n    });\n    return;\n  }\n\n  parts.push({\n    type: \"text/plain\",\n    content: newMessage\n  });\n  currentUser.sendMultipartMessage({\n    roomId: \"\".concat(currentRoom.id),\n    parts\n  });\n  this.setState({\n    newMessage: \"\"\n  });\n}\n\nexport { handleInput, connectToRoom, connectToChatkit, sendMessage };","map":{"version":3,"sources":["/home/ayo/Dev/pusher/slash-commands/src/methods.js"],"names":["ChatManager","TokenProvider","handleInput","event","target","value","name","setState","connectToChatkit","preventDefault","userId","state","tokenProvider","url","chatManager","instanceLocator","connect","onRoomUpdated","room","rooms","index","findIndex","r","id","then","currentUser","connectToRoom","call","catch","console","error","roomId","messages","subscribeToRoomMultipart","messageLimit","hooks","onMessage","message","currentRoom","setReadCursor","position","sendNews","query","fetch","res","json","data","parts","articles","forEach","article","push","type","content","title","source","sendMultipartMessage","handleSlashCommand","cmd","split","txt","slice","length","alert","sendMessage","newMessage","trim","startsWith"],"mappings":"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","sourcesContent":["import { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\n\nfunction handleInput(event) {\n  const { value, name } = event.target;\n\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const { userId } = this.state;\n\n  const tokenProvider = new TokenProvider({\n    url:\n    \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/69ed7eee-36b3-4907-9f1e-60c3db70d559/token\"\n  });\n\n  const chatManager = new ChatManager({\n    instanceLocator: \"v1:us1:69ed7eee-36b3-4907-9f1e-60c3db70d559\",\n    userId,\n    tokenProvider\n  });\n\n  return chatManager\n    .connect({\n      onRoomUpdated: room => {\n        const { rooms } = this.state;\n        const index = rooms.findIndex(r => r.id === room.id);\n        rooms[index] = room;\n        this.setState({\n          rooms,\n        });\n      }\n    })\n    .then(currentUser => {\n      this.setState(\n        {\n          currentUser,\n        },\n        () => connectToRoom.call(this)\n      );\n    })\n    .catch(console.error);\n}\n\nfunction connectToRoom(roomId = \"21431174\") {\n  const { currentUser } = this.state;\n  this.setState({\n    messages: []\n  });\n\n  return currentUser\n    .subscribeToRoomMultipart({\n      roomId,\n      messageLimit: 10,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message],\n          });\n\n          const { currentRoom } = this.state;\n\n          if (currentRoom === null) return;\n\n          return currentUser.setReadCursor({\n            roomId: currentRoom.id,\n            position: message.id,\n          });\n        },\n      }\n    })\n    .then(currentRoom => {\n      this.setState({\n        currentRoom,\n        rooms: currentUser.rooms,\n      });\n    })\n    .catch(console.error);\n}\n\nfunction sendNews(query) {\n  const { currentUser, currentRoom } = this.state;\n\n  fetch(`https://newsapi.org/v2/everything?q=${query}&pageSize=3&apiKey=7b5e61f91b1142cd97518974460dcdb2`)\n    .then(res => res.json())\n    .then(data => {\n      const parts = [];\n      data.articles.forEach(article => {\n        parts.push({\n          type: \"text/plain\",\n          content: `${article.title} - ${article.source.name} - ${article.url}`\n        });\n      });\n\n      currentUser.sendMultipartMessage({\n        roomId: `${currentRoom.id}`,\n        parts\n      });\n    })\n    .catch(console.error);\n}\n\nfunction handleSlashCommand(message) {\n  const cmd = message.split(\" \")[0];\n  const txt = message.slice(cmd.length)\n\n  if (cmd !== \"/news\") {\n    alert(`${cmd} is not a valid command`);\n    return;\n  }\n\n   return sendNews.call(this, txt);\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const { newMessage, currentUser, currentRoom } = this.state;\n  const parts = [];\n\n  if (newMessage.trim() === \"\") return;\n\n  if (newMessage.startsWith(\"/\")) {\n    handleSlashCommand.call(this, newMessage);\n\n    this.setState({\n      newMessage: \"\",\n    });\n    return;\n  }\n\n  parts.push({\n    type: \"text/plain\",\n    content: newMessage\n  });\n\n  currentUser.sendMultipartMessage({\n    roomId: `${currentRoom.id}`,\n    parts\n  });\n\n  this.setState({\n    newMessage: \"\",\n  });\n}\n\nexport {\n  handleInput,\n  connectToRoom,\n  connectToChatkit,\n  sendMessage,\n}\n"]},"metadata":{},"sourceType":"module"}