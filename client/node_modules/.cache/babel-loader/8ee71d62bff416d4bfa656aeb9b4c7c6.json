{"ast":null,"code":"import { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\nimport axios from 'axios';\n\nfunction handleInput(event) {\n  const _event$target = event.target,\n        value = _event$target.value,\n        name = _event$target.name;\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const userId = this.state.userId;\n  axios.post('http://localhost:5200/users', {\n    username: userId\n  }).then(() => {\n    const tokenProvider = new TokenProvider({\n      url: \"http://localhost:5200/authenticate\"\n    });\n    const chatManager = new ChatManager({\n      instanceLocator: \"v1:us1:767f9cbc-ed46-405f-9ac8-8a248e533960\",\n      userId,\n      tokenProvider\n    });\n    return chatManager.connect().then(currentUser => {\n      this.setState({\n        currentUser\n      }, () => connectToRoom.call(this));\n    });\n  }).catch(console.error);\n}\n\nfunction connectToRoom(roomId = \"19375958\") {\n  const currentUser = this.state.currentUser;\n  this.setState({\n    messages: []\n  });\n  return currentUser.subscribeToRoomMultipart({\n    roomId,\n    messageLimit: 10,\n    hooks: {\n      onMessage: message => {\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n      }\n    }\n  }).then(currentRoom => {\n    this.setState({\n      currentRoom,\n      rooms: currentUser.rooms\n    });\n  }).catch(console.error);\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const _this$state = this.state,\n        newMessage = _this$state.newMessage,\n        currentUser = _this$state.currentUser,\n        currentRoom = _this$state.currentRoom;\n  const parts = [];\n  if (newMessage.trim() === \"\") return;\n  parts.push({\n    type: \"text/plain\",\n    content: newMessage\n  });\n  currentUser.sendMultipartMessage({\n    roomId: \"\".concat(currentRoom.id),\n    parts\n  });\n  this.setState({\n    newMessage: \"\"\n  });\n}\n\nexport { handleInput, connectToRoom, connectToChatkit, sendMessage };","map":{"version":3,"sources":["/home/ayo/Dev/tutorials/pusher/golang-react/client/src/methods.js"],"names":["ChatManager","TokenProvider","axios","handleInput","event","target","value","name","setState","connectToChatkit","preventDefault","userId","state","post","username","then","tokenProvider","url","chatManager","instanceLocator","connect","currentUser","connectToRoom","call","catch","console","error","roomId","messages","subscribeToRoomMultipart","messageLimit","hooks","onMessage","message","currentRoom","rooms","sendMessage","newMessage","parts","trim","push","type","content","sendMultipartMessage","id"],"mappings":"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","sourcesContent":["import { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\nimport axios from 'axios';\n\nfunction handleInput(event) {\n  const { value, name } = event.target;\n\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const { userId } = this.state;\n\n  axios\n    .post('http://localhost:5200/users', { username: userId })\n    .then(() => {\n      const tokenProvider = new TokenProvider({\n        url:\n        \"http://localhost:5200/authenticate\"\n      });\n\n      const chatManager = new ChatManager({\n        instanceLocator: \"v1:us1:767f9cbc-ed46-405f-9ac8-8a248e533960\",\n        userId,\n        tokenProvider\n      });\n\n      return chatManager\n        .connect()\n        .then(currentUser => {\n          this.setState(\n            {\n              currentUser,\n            },\n            () => connectToRoom.call(this)\n          );\n        })\n    })\n    .catch(console.error);\n}\n\nfunction connectToRoom(roomId = \"19375958\") {\n  const { currentUser } = this.state;\n  this.setState({\n    messages: []\n  });\n\n  return currentUser\n    .subscribeToRoomMultipart({\n      roomId,\n      messageLimit: 10,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message],\n          });\n        },\n      }\n    })\n    .then(currentRoom => {\n      this.setState({\n        currentRoom,\n        rooms: currentUser.rooms,\n      });\n    })\n    .catch(console.error);\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const { newMessage, currentUser, currentRoom } = this.state;\n  const parts = [];\n\n  if (newMessage.trim() === \"\") return;\n\n  parts.push({\n    type: \"text/plain\",\n    content: newMessage\n  });\n\n  currentUser.sendMultipartMessage({\n    roomId: `${currentRoom.id}`,\n    parts\n  });\n\n  this.setState({\n    newMessage: \"\",\n  });\n}\n\nexport {\n  handleInput,\n  connectToRoom,\n  connectToChatkit,\n  sendMessage,\n}\n"]},"metadata":{},"sourceType":"module"}