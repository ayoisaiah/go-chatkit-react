{"ast":null,"code":"var _jsxFileName = \"/home/ayo/Dev/tutorials/pusher/golang-react/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\nimport axios from 'axios';\nimport \"skeleton-css/css/normalize.css\";\nimport \"skeleton-css/css/skeleton.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleInput = event => {\n      const _event$target = event.target,\n            value = _event$target.value,\n            name = _event$target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.connectToChatkit = event => {\n      event.preventDefault();\n      const userId = this.state.userId;\n      axios.post('http://localhost:5200/users', {\n        username: userId\n      }).then(() => {\n        const tokenProvider = new TokenProvider({\n          url: \"http://localhost:5200/authenticate\"\n        });\n        const chatManager = new ChatManager({\n          instanceLocator: \"v1:us1:767f9cbc-ed46-405f-9ac8-8a248e533960\",\n          userId,\n          tokenProvider\n        });\n        return chatManager.connect().then(currentUser => {\n          this.setState({\n            currentUser\n          }, () => this.connectToRoom());\n        });\n      }).catch(console.error);\n    };\n\n    this.connectToRoom = (roomId = \"eeec9d87-5d32-453c-8b7d-a8b51dcc9a0d\") => {\n      const currentUser = this.state.currentUser;\n      this.setState({\n        messages: []\n      });\n      return currentUser.subscribeToRoomMultipart({\n        roomId,\n        messageLimit: 10,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          }\n        }\n      }).then(currentRoom => {\n        this.setState({\n          currentRoom,\n          rooms: currentUser.rooms\n        });\n      }).catch(console.error);\n    };\n\n    this.sendMessage = event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            newMessage = _this$state.newMessage,\n            currentUser = _this$state.currentUser,\n            currentRoom = _this$state.currentRoom;\n      const parts = [];\n      if (newMessage.trim() === \"\") return;\n      parts.push({\n        type: \"text/plain\",\n        content: newMessage\n      });\n      currentUser.sendMultipartMessage({\n        roomId: \"\".concat(currentRoom.id),\n        parts\n      });\n      this.setState({\n        newMessage: \"\"\n      });\n    };\n\n    this.state = {\n      userId: \"\",\n      currentUser: null,\n      currentRoom: null,\n      rooms: [],\n      messages: [],\n      newMessage: \"\"\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          rooms = _this$state2.rooms,\n          currentRoom = _this$state2.currentRoom,\n          currentUser = _this$state2.currentUser,\n          messages = _this$state2.messages,\n          newMessage = _this$state2.newMessage;\n    const roomList = rooms.map(room => {\n      const isRoomActive = room.id === currentRoom.id ? 'active' : '';\n      return React.createElement(\"li\", {\n        className: isRoomActive,\n        key: room.id,\n        onClick: () => this.connectToRoom(room.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"room-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, room.name));\n    });\n    const messageList = messages.map(message => {\n      const arr = message.parts.map(p => {\n        let text = p.payload.content;\n        return React.createElement(\"span\", {\n          class: \"message-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, text);\n      });\n      return React.createElement(\"li\", {\n        className: \"message\",\n        key: message.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"user-id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, message.senderId), arr));\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"aside\", {\n      className: \"sidebar left-sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, !currentUser ? React.createElement(\"div\", {\n      className: \"login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Join Chat\"), React.createElement(\"form\", {\n      id: \"login\",\n      onSubmit: this.connectToChatkit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleInput,\n      className: \"userId\",\n      type: \"text\",\n      name: \"userId\",\n      placeholder: \"Enter your username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }))) : null, currentRoom ? React.createElement(\"div\", {\n      className: \"room-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Rooms\"), React.createElement(\"ul\", {\n      className: \"chat-rooms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, roomList)) : null), currentUser ? React.createElement(\"section\", {\n      className: \"chat-screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"chat-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, messageList), React.createElement(\"footer\", {\n      className: \"chat-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.sendMessage,\n      className: \"message-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: newMessage,\n      name: \"newMessage\",\n      className: \"message-input\",\n      placeholder: \"Type your message and hit ENTER to send\",\n      onChange: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })))) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ayo/Dev/tutorials/pusher/golang-react/client/src/App.js"],"names":["React","Component","ChatManager","TokenProvider","axios","App","constructor","handleInput","event","target","value","name","setState","connectToChatkit","preventDefault","userId","state","post","username","then","tokenProvider","url","chatManager","instanceLocator","connect","currentUser","connectToRoom","catch","console","error","roomId","messages","subscribeToRoomMultipart","messageLimit","hooks","onMessage","message","currentRoom","rooms","sendMessage","newMessage","parts","trim","push","type","content","sendMultipartMessage","id","render","roomList","map","room","isRoomActive","messageList","arr","p","text","payload","senderId"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\nimport axios from 'axios';\n\nimport \"skeleton-css/css/normalize.css\";\nimport \"skeleton-css/css/skeleton.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: \"\",\n      currentUser: null,\n      currentRoom: null,\n      rooms: [],\n      messages: [],\n      newMessage: \"\",\n    };\n  }\n\n  handleInput = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  connectToChatkit = (event) => {\n    event.preventDefault();\n    const { userId } = this.state;\n\n    axios\n      .post('http://localhost:5200/users', { username: userId })\n      .then(() => {\n        const tokenProvider = new TokenProvider({\n          url:\n          \"http://localhost:5200/authenticate\"\n        });\n\n        const chatManager = new ChatManager({\n          instanceLocator: \"v1:us1:767f9cbc-ed46-405f-9ac8-8a248e533960\",\n          userId,\n          tokenProvider\n        });\n\n        return chatManager\n          .connect()\n          .then(currentUser => {\n            this.setState(\n              {\n                currentUser,\n              },\n              () => this.connectToRoom()\n            );\n          })\n      })\n      .catch(console.error);\n  }\n\n  connectToRoom = (roomId = \"eeec9d87-5d32-453c-8b7d-a8b51dcc9a0d\") => {\n    const { currentUser } = this.state;\n    this.setState({\n      messages: []\n    });\n\n    return currentUser\n      .subscribeToRoomMultipart({\n        roomId,\n        messageLimit: 10,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message],\n            });\n          },\n        }\n      })\n      .then(currentRoom => {\n        this.setState({\n          currentRoom,\n          rooms: currentUser.rooms,\n        });\n      })\n      .catch(console.error);\n  }\n\n  sendMessage = (event) => {\n    event.preventDefault();\n    const { newMessage, currentUser, currentRoom } = this.state;\n    const parts = [];\n\n    if (newMessage.trim() === \"\") return;\n\n    parts.push({\n      type: \"text/plain\",\n      content: newMessage\n    });\n\n    currentUser.sendMultipartMessage({\n      roomId: `${currentRoom.id}`,\n      parts\n    });\n\n    this.setState({\n      newMessage: \"\",\n    });\n  }\n\n  render() {\n    const {\n      rooms,\n      currentRoom,\n      currentUser,\n      messages,\n      newMessage,\n    } = this.state;\n\n    const roomList = rooms.map(room => {\n      const isRoomActive = room.id === currentRoom.id ? 'active' : '';\n      return (\n        <li\n          className={isRoomActive}\n          key={room.id}\n          onClick={() => this.connectToRoom(room.id)}\n        >\n          <span className=\"room-name\">{room.name}</span>\n        </li>\n      );\n    });\n\n    const messageList = messages.map(message => {\n      const arr = message.parts.map(p => {\n        let text = p.payload.content;\n        return (\n          <span class=\"message-text\">{text}</span>\n        );\n      });\n\n      return (\n        <li className=\"message\" key={message.id}>\n          <div>\n            <span className=\"user-id\">{message.senderId}</span>\n            {arr}\n          </div>\n        </li>\n      )\n    });\n\n    return (\n      <div className=\"App\">\n        <aside className=\"sidebar left-sidebar\">\n          {!currentUser ? (\n              <div className=\"login\">\n                <h3>Join Chat</h3>\n                <form id=\"login\" onSubmit={this.connectToChatkit}>\n                  <input\n                    onChange={this.handleInput}\n                    className=\"userId\"\n                    type=\"text\"\n                    name=\"userId\"\n                    placeholder=\"Enter your username\"\n                  />\n                </form>\n              </div>\n            ) : null\n          }\n          {currentRoom ? (\n            <div className=\"room-list\">\n              <h3>Rooms</h3>\n              <ul className=\"chat-rooms\">\n                {roomList}\n              </ul>\n            </div>\n            ) : null\n          }\n        </aside>\n        {\n          currentUser ? (\n            <section className=\"chat-screen\">\n              <ul className=\"chat-messages\">\n                {messageList}\n              </ul>\n              <footer className=\"chat-footer\">\n                <form onSubmit={this.sendMessage} className=\"message-form\">\n                  <input\n                    type=\"text\"\n                    value={newMessage}\n                    name=\"newMessage\"\n                    className=\"message-input\"\n                    placeholder=\"Type your message and hit ENTER to send\"\n                    onChange={this.handleInput}\n                  />\n                </form>\n              </footer>\n            </section>\n          ) : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}