{"ast":null,"code":"import { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\n\nfunction handleInput(event) {\n  const _event$target = event.target,\n        value = _event$target.value,\n        name = _event$target.name;\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const userId = this.state.userId;\n  const tokenProvider = new TokenProvider({\n    url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/69ed7eee-36b3-4907-9f1e-60c3db70d559/token\"\n  });\n  const chatManager = new ChatManager({\n    instanceLocator: \"v1:us1:69ed7eee-36b3-4907-9f1e-60c3db70d559\",\n    userId,\n    tokenProvider\n  });\n  return chatManager.connect().then(currentUser => {\n    this.setState({\n      currentUser,\n      rooms: currentUser.rooms\n    }, () => connectToRoom.call(this));\n  }).catch(console.error);\n}\n\nfunction connectToRoom(roomId = \"21430947\") {\n  const currentUser = this.state.currentUser;\n  this.setState({\n    messages: []\n  });\n  return currentUser.subscribeToRoomMultipart({\n    roomId,\n    messageLimit: 10,\n    hooks: {\n      onMessage: message => {\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n      }\n    }\n  }).then(currentRoom => {\n    this.setState({\n      currentRoom,\n      rooms: currentUser.rooms\n    });\n  }).catch(console.error);\n}\n\nfunction sendMessage() {\n  const _this$state = this.state,\n        newMessage = _this$state.newMessage,\n        currentUser = _this$state.currentUser,\n        currentRoom = _this$state.currentRoom;\n  const parts = [];\n  if (newMessage.trim() === \"\") return;\n  parts.push({\n    type: \"text/plain\",\n    content: newMessage\n  });\n  currentUser.sendMultipartMessage({\n    roomId: \"\".concat(currentRoom.id),\n    parts\n  });\n  this.setState({\n    newMessage: \"\"\n  });\n}\n\nexport { handleInput, connectToRoom, connectToChatkit, sendMessage };","map":{"version":3,"sources":["/home/ayo/Dev/pusher/react-unread/src/methods.js"],"names":["ChatManager","TokenProvider","handleInput","event","target","value","name","setState","connectToChatkit","preventDefault","userId","state","tokenProvider","url","chatManager","instanceLocator","connect","then","currentUser","rooms","connectToRoom","call","catch","console","error","roomId","messages","subscribeToRoomMultipart","messageLimit","hooks","onMessage","message","currentRoom","sendMessage","newMessage","parts","trim","push","type","content","sendMultipartMessage","id"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,aAAtB,QAA2C,wBAA3C;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,wBACFA,KAAK,CAACC,MADJ;AAAA,QAClBC,KADkB,iBAClBA,KADkB;AAAA,QACXC,IADW,iBACXA,IADW;AAG1B,OAAKC,QAAL,CAAc;AACZ,KAACD,IAAD,GAAQD;AADI,GAAd;AAGD;;AAED,SAASG,gBAAT,CAA0BL,KAA1B,EAAiC;AAC/BA,EAAAA,KAAK,CAACM,cAAN;AAD+B,QAEvBC,MAFuB,GAEZ,KAAKC,KAFO,CAEvBD,MAFuB;AAI/B,QAAME,aAAa,GAAG,IAAIX,aAAJ,CAAkB;AACtCY,IAAAA,GAAG,EACD;AAFoC,GAAlB,CAAtB;AAKA,QAAMC,WAAW,GAAG,IAAId,WAAJ,CAAgB;AAClCe,IAAAA,eAAe,EAAE,6CADiB;AAElCL,IAAAA,MAFkC;AAGlCE,IAAAA;AAHkC,GAAhB,CAApB;AAMA,SAAOE,WAAW,CACfE,OADI,GAEJC,IAFI,CAECC,WAAW,IAAI;AACnB,SAAKX,QAAL,CACE;AACEW,MAAAA,WADF;AAEEC,MAAAA,KAAK,EAAED,WAAW,CAACC;AAFrB,KADF,EAKE,MAAMC,aAAa,CAACC,IAAd,CAAmB,IAAnB,CALR;AAOD,GAVI,EAWJC,KAXI,CAWEC,OAAO,CAACC,KAXV,CAAP;AAYD;;AAED,SAASJ,aAAT,CAAuBK,MAAM,GAAG,UAAhC,EAA4C;AAAA,QAClCP,WADkC,GAClB,KAAKP,KADa,CAClCO,WADkC;AAE1C,OAAKX,QAAL,CAAc;AACZmB,IAAAA,QAAQ,EAAE;AADE,GAAd;AAIA,SAAOR,WAAW,CACfS,wBADI,CACqB;AACxBF,IAAAA,MADwB;AAExBG,IAAAA,YAAY,EAAE,EAFU;AAGxBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAEC,OAAO,IAAI;AACpB,aAAKxB,QAAL,CAAc;AACZmB,UAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKf,KAAL,CAAWe,QAAf,EAAyBK,OAAzB;AADE,SAAd;AAGD;AALI;AAHiB,GADrB,EAYJd,IAZI,CAYCe,WAAW,IAAI;AACnB,SAAKzB,QAAL,CAAc;AACZyB,MAAAA,WADY;AAEZb,MAAAA,KAAK,EAAED,WAAW,CAACC;AAFP,KAAd;AAID,GAjBI,EAkBJG,KAlBI,CAkBEC,OAAO,CAACC,KAlBV,CAAP;AAmBD;;AAED,SAASS,WAAT,GAAuB;AAAA,sBAC4B,KAAKtB,KADjC;AAAA,QACbuB,UADa,eACbA,UADa;AAAA,QACDhB,WADC,eACDA,WADC;AAAA,QACYc,WADZ,eACYA,WADZ;AAErB,QAAMG,KAAK,GAAG,EAAd;AAEA,MAAID,UAAU,CAACE,IAAX,OAAsB,EAA1B,EAA8B;AAE9BD,EAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,IAAAA,IAAI,EAAE,YADG;AAETC,IAAAA,OAAO,EAAEL;AAFA,GAAX;AAKAhB,EAAAA,WAAW,CAACsB,oBAAZ,CAAiC;AAC/Bf,IAAAA,MAAM,YAAKO,WAAW,CAACS,EAAjB,CADyB;AAE/BN,IAAAA;AAF+B,GAAjC;AAKA,OAAK5B,QAAL,CAAc;AACZ2B,IAAAA,UAAU,EAAE;AADA,GAAd;AAGD;;AAED,SACEhC,WADF,EAEEkB,aAFF,EAGEZ,gBAHF,EAIEyB,WAJF","sourcesContent":["import { ChatManager, TokenProvider } from \"@pusher/chatkit-client\";\n\nfunction handleInput(event) {\n  const { value, name } = event.target;\n\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const { userId } = this.state;\n\n  const tokenProvider = new TokenProvider({\n    url:\n      \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/69ed7eee-36b3-4907-9f1e-60c3db70d559/token\"\n  });\n\n  const chatManager = new ChatManager({\n    instanceLocator: \"v1:us1:69ed7eee-36b3-4907-9f1e-60c3db70d559\",\n    userId,\n    tokenProvider\n  });\n\n  return chatManager\n    .connect()\n    .then(currentUser => {\n      this.setState(\n        {\n          currentUser,\n          rooms: currentUser.rooms\n        },\n        () => connectToRoom.call(this)\n      );\n    })\n    .catch(console.error);\n}\n\nfunction connectToRoom(roomId = \"21430947\") {\n  const { currentUser } = this.state;\n  this.setState({\n    messages: []\n  });\n\n  return currentUser\n    .subscribeToRoomMultipart({\n      roomId,\n      messageLimit: 10,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message],\n          });\n        },\n      }\n    })\n    .then(currentRoom => {\n      this.setState({\n        currentRoom,\n        rooms: currentUser.rooms,\n      });\n    })\n    .catch(console.error);\n}\n\nfunction sendMessage() {\n  const { newMessage, currentUser, currentRoom } = this.state;\n  const parts = [];\n\n  if (newMessage.trim() === \"\") return;\n\n  parts.push({\n    type: \"text/plain\",\n    content: newMessage\n  });\n\n  currentUser.sendMultipartMessage({\n    roomId: `${currentRoom.id}`,\n    parts\n  });\n\n  this.setState({\n    newMessage: \"\",\n  });\n}\n\nexport {\n  handleInput,\n  connectToRoom,\n  connectToChatkit,\n  sendMessage,\n}\n"]},"metadata":{},"sourceType":"module"}