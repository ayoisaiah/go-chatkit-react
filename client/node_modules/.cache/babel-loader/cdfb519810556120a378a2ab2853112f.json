{"ast":null,"code":"var _jsxFileName = \"/home/ayo/Dev/pusher/slash-commands/src/App.js\";\nimport React, { Component } from \"react\";\nimport { handleInput, connectToChatkit, connectToRoom, sendMessage } from \"./methods\";\nimport \"skeleton-css/css/normalize.css\";\nimport \"skeleton-css/css/skeleton.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: \"\",\n      currentUser: null,\n      currentRoom: null,\n      rooms: [],\n      messages: [],\n      newMessage: \"\",\n      slashCommands: [\"/giphy\", \"/news\"]\n    };\n    this.handleInput = handleInput.bind(this);\n    this.connectToChatkit = connectToChatkit.bind(this);\n    this.connectToRoom = connectToRoom.bind(this);\n    this.sendMessage = sendMessage.bind(this);\n  }\n\n  render() {\n    const _this$state = this.state,\n          rooms = _this$state.rooms,\n          currentRoom = _this$state.currentRoom,\n          currentUser = _this$state.currentUser,\n          messages = _this$state.messages,\n          newMessage = _this$state.newMessage;\n\n    const insertTextAtIndices = (text, obj) => {\n      return text.replace(/./g, function (character, index) {\n        return obj[index] ? obj[index] + character : character;\n      });\n    };\n\n    const roomList = rooms.map(room => {\n      const isRoomActive = room.id === currentRoom.id ? 'active' : '';\n      return React.createElement(\"li\", {\n        className: isRoomActive,\n        key: room.id,\n        onClick: () => this.connectToRoom(room.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"room-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, room.name), room.unreadCount > 0 ? React.createElement(\"span\", {\n        className: \"room-unread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, room.unreadCount) : null);\n    });\n    const messageList = messages.map(message => {\n      const arr = message.parts.map(p => {\n        const urlMatches = p.payload.content.match(/\\b(http|https)?:\\/\\/\\S+/gi) || [];\n        let text = p.payload.content;\n        urlMatches.forEach(link => {\n          const startIndex = text.indexOf(link);\n          const endIndex = startIndex + link.length;\n          text = insertTextAtIndices(text, {\n            [startIndex]: \"<a href=\\\"\".concat(link, \"\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" class=\\\"embedded-link\\\">\"),\n            [endIndex]: \"</a>\"\n          });\n        });\n        return React.createElement(\"span\", {\n          className: \"message-text\",\n          dangerouslySetInnerHTML: {\n            __html: text\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"li\", {\n        className: \"message\",\n        key: message.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"user-id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, message.senderId), arr));\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"aside\", {\n      className: \"sidebar left-sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, !currentUser ? React.createElement(\"div\", {\n      className: \"login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Join Chat\"), React.createElement(\"form\", {\n      id: \"login\",\n      onSubmit: this.connectToChatkit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleInput,\n      className: \"userId\",\n      type: \"text\",\n      name: \"userId\",\n      placeholder: \"Enter your username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))) : null, currentRoom ? React.createElement(\"div\", {\n      className: \"room-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Rooms\"), React.createElement(\"ul\", {\n      className: \"chat-rooms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, roomList)) : null), currentUser ? React.createElement(\"section\", {\n      className: \"chat-screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"chat-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, messageList), React.createElement(\"footer\", {\n      className: \"chat-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.sendMessage,\n      className: \"message-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: newMessage,\n      name: \"newMessage\",\n      className: \"message-input\",\n      placeholder: \"Type your message and hit ENTER to send\",\n      onChange: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })))) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ayo/Dev/pusher/slash-commands/src/App.js"],"names":["React","Component","handleInput","connectToChatkit","connectToRoom","sendMessage","App","constructor","state","userId","currentUser","currentRoom","rooms","messages","newMessage","slashCommands","bind","render","insertTextAtIndices","text","obj","replace","character","index","roomList","map","room","isRoomActive","id","name","unreadCount","messageList","message","arr","parts","p","urlMatches","payload","content","match","forEach","link","startIndex","indexOf","endIndex","length","__html","senderId"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  handleInput,\n  connectToChatkit,\n  connectToRoom,\n  sendMessage,\n} from \"./methods\";\n\nimport \"skeleton-css/css/normalize.css\";\nimport \"skeleton-css/css/skeleton.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: \"\",\n      currentUser: null,\n      currentRoom: null,\n      rooms: [],\n      messages: [],\n      newMessage: \"\",\n      slashCommands: [\"/giphy\", \"/news\"]\n    };\n\n    this.handleInput = handleInput.bind(this);\n    this.connectToChatkit = connectToChatkit.bind(this);\n    this.connectToRoom = connectToRoom.bind(this);\n    this.sendMessage = sendMessage.bind(this);\n  }\n\n  render() {\n    const {\n      rooms,\n      currentRoom,\n      currentUser,\n      messages,\n      newMessage,\n    } = this.state;\n\n    const insertTextAtIndices = (text, obj) => {\n      return text.replace(/./g, function(character, index) {\n        return obj[index] ? obj[index] + character : character;\n      });\n    };\n\n    const roomList = rooms.map(room => {\n      const isRoomActive = room.id === currentRoom.id ? 'active' : '';\n      return (\n        <li\n          className={isRoomActive}\n          key={room.id}\n          onClick={() => this.connectToRoom(room.id)}\n        >\n          <span className=\"room-name\">{room.name}</span>\n          {room.unreadCount > 0 ? (\n            <span className=\"room-unread\">{room.unreadCount}</span>\n          ): null}\n        </li>\n      );\n    });\n\n    const messageList = messages.map(message => {\n      const arr = message.parts.map(p => {\n        const urlMatches = p.payload.content.match(/\\b(http|https)?:\\/\\/\\S+/gi) || [];\n        let text = p.payload.content;\n        urlMatches.forEach(link => {\n          const startIndex = text.indexOf(link);\n          const endIndex = startIndex + link.length;\n          text = insertTextAtIndices(text, {\n            [startIndex]: `<a href=\"${link}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"embedded-link\">`,\n            [endIndex]: \"</a>\"\n          });\n        });\n\n          return (\n            <span className=\"message-text\" dangerouslySetInnerHTML={{\n              __html: text\n            }}></span>\n          );\n      });\n\n      return (\n        <li className=\"message\" key={message.id}>\n          <div>\n            <span className=\"user-id\">{message.senderId}</span>\n            {arr}\n          </div>\n        </li>\n      )\n    });\n\n    return (\n      <div className=\"App\">\n        <aside className=\"sidebar left-sidebar\">\n          {!currentUser ? (\n              <div className=\"login\">\n                <h3>Join Chat</h3>\n                <form id=\"login\" onSubmit={this.connectToChatkit}>\n                  <input\n                    onChange={this.handleInput}\n                    className=\"userId\"\n                    type=\"text\"\n                    name=\"userId\"\n                    placeholder=\"Enter your username\"\n                  />\n                </form>\n              </div>\n            ) : null\n          }\n          {currentRoom ? (\n            <div className=\"room-list\">\n              <h3>Rooms</h3>\n              <ul className=\"chat-rooms\">\n                {roomList}\n              </ul>\n            </div>\n            ) : null\n          }\n        </aside>\n        {\n          currentUser ? (\n            <section className=\"chat-screen\">\n              <ul className=\"chat-messages\">\n                {messageList}\n              </ul>\n              <footer className=\"chat-footer\">\n                <form onSubmit={this.sendMessage} className=\"message-form\">\n                  <input\n                    type=\"text\"\n                    value={newMessage}\n                    name=\"newMessage\"\n                    className=\"message-input\"\n                    placeholder=\"Type your message and hit ENTER to send\"\n                    onChange={this.handleInput}\n                  />\n                </form>\n              </footer>\n            </section>\n          ) : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}